#!/usr/bin/python3
######## GLOBALES A EDITAR POR EL USUARIO ###################
TIMEOUT = 4
VERBOSE = False
RCV_FIRST = True
#############################################################

import sys, socket, threading
YLW, BLU, END = "\033[1;33m", "\033[1;36m" , "\033[0m"
HEX_FILTER = ''.join([ (len(repr(chr(i))) == 3 ) and chr(i) or '.' for i in range(256) ])

def hexdump(src, length=16, show=True):
    src = src.decode('utf-8') if isinstance(src, bytes) else src
    results = list()
    for i in range(0, len(src), length):
        word = str(src[i:i+length]); printable = word.translate(HEX_FILTER)
        hexa = ' '.join([ f'{ord(c):02X}' for c in word ]); hexwidth = length*3
        results.append(f'{i:04X} {hexa:<{hexwidth}} : {printable}')
    print('\n'.join(results) if show else '')
    return results

def receive_from(conn):  ## recibe data todo el rato y la mete en el buffer
    buffer = b""; conn.settimeout(TIMEOUT)
    try:
        while (data := conn.recv(4096)):
            buffer += data
    except Exception as e:
        print(f"  {e}")
    return buffer

def request_handler(buffer):
    return buffer
def response_handler(buffer):
    return buffer

## Proceso hijo --->   socket localhost (cli_sock)    socket remoto (r_sock), ambos en escucha
def proxy_handler(cli_sock, rhost, rport):
    r_sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM); 
    r_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1); r_sock.connect((rhost,rport))
    if RCV_FIRST == True:
        r_buff = receive_from(r_sock)
        if len(r_buff):
            print(f"[<==] Received {len(r_buff)} bytes from remote"); 
            print("-"*24); print(r_buff.decode('utf-8').replace('\\n','\n')); print("-"*24); 
            if VERBOSE: hexdump(r_buff)
            r_buff = response_handler(r_buff); cli_sock.send(r_buff); print("[==>] Send to local")

    while True:  ## todo el rato escucha en el buffer local y despues el remoto
        l_buff = receive_from(cli_sock)
        if len(l_buff):
            print(f"{YLW}[==>] Received {len(l_buff)} bytes from localhost."); 
            print("-"*24); print(l_buff.decode('utf-8').replace('\\n','\n')); print("--"*12);
            hexdump(l_buff) if VERBOSE == True else None
            l_buff = request_handler(l_buff); r_sock.send(l_buff); print("[==>] Sent to remote")
        r_buff = receive_from(r_sock)
        if len(r_buff):
            print(f"{BLU}[<==] Received {len(r_buff)} bytes from remote");
            print("-"*24); print(r_buff.decode('utf-8').replace('\\n','\n')); print("-"*24)
            hexdump(l_buff) if VERBOSE == True else None
            r_buff = response_handler(r_buff); cli_sock.send(r_buff); print("[==>] Send to local")
        if not len(l_buff) or not len(r_buff):
            cli_sock.close(); r_sock.close(); print(f"{END}No more data"); sys.exit(0)
            break
    
def server_loop(lhost,lport,rhost,rport):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server.bind((lhost,lport)); print(f"[*] Listening on {lhost}:{lport}"); server.listen(5)
        while True:
            cli_sock, addr = server.accept()
            print(f"[==>] Received incoming connection from {addr[0]}:{addr[1]}")  ## escucha (cli_sock)
            threading.Thread(target=proxy_handler,args=(cli_sock,rhost,rport)).start()
    except Exception as e:
            print(f"[!!] Failed to listen on {lhost}:{lport}. Exception {e}"); sys.exit(0)

if len(sys.argv[1:]) != 4:
    print(f"Usage: ./proxy.py [lhost] [lport] [rhost] [rport]")
    print(f"Example: ./proxy.py 127.0.0.1 9005 info.cern.ch 80 -> $ nc 127.0.0.1 9005 -> GET / HTTP/v1.1")
    sys.exit(0)
lhost, lport, rhost, rport = sys.argv[1], int(sys.argv[2]), sys.argv[3], int(sys.argv[4])
server_loop(lhost,lport,rhost,rport)
