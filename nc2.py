#!/usr/bin/python
import sys, socket, getopt, threading, subprocess, os
listen = True
command = True
download = False
upload = False

##############################################################################################

def upload_file(client):
    file_name = "archivo.txt"
    client.send(b"mandando archivo...")
    with open(file_name, 'wb') as file:
        while True:
            data = client.recv(1024)
            if not data:
                break
                sys.exit(0)
            file.write(data)
    client.close()


##############################################################################################

def download_file(client_socket):
    request = client_socket.recv(1024).decode('utf-8')
    if request.startswith("GET "):  # Comprueba si la solicitud comienza con "GET"
        filename = request[4:].strip()  # Obtiene el nombre del archivo después de "GET "
        if os.path.exists(filename):  # Verifica si el archivo existe en el servidor
            with open(filename, 'rb') as file:
                data = file.read()
                client_socket.sendall(data)  # Envía el contenido del archivo al cliente
        else:
            client_socket.sendall(b"File not found")
    else:
        client_socket.sendall(b"Invalid")
    client_socket.close()

##############################################################################################

def shell(client):
    request = client.recv(1024).decode('utf-8'); print(f"[*] Received: {request}")
    while True:
        try: 
            client.send(" \n$:> ".encode('utf-8')); cmd_buffer = ""
        except: 
            pass
        while "\n" not in cmd_buffer:
            cmd_buffer += client.recv(1024).decode('utf-8') # send back the command output  
        cmd_buffer = cmd_buffer.rstrip()
        try:
            response = subprocess.check_output(cmd_buffer,stderr=subprocess.STDOUT, shell=True)
            client.send(response)
        except: 
            response = "Failed to execute command.\r\n"; client.send(response.encode())

###4. FUNCION DEL SOCKET CLIENTE HIJO ########################################################

def handle_client(client): # esto esta dentro de un while True
    if command:
        shell(client)
    if download:
        download_file(client)
    if upload:
        upload_file(client); sys.exit(0)

##############################################################################################

####2.  MODO SERVIDOR: sockets que se pondran en escucha y crearan sockets clientes hijos ######
def server_loop():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM); 
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind(("0.0.0.0",667)); server.listen(5); print("waiting for connection...")
    while True:
        client, addr = server.accept() # crea un nuevo subproceso para el socket del cliente.
        listener = threading.Thread(target=handle_client,args=(client,)); listener.start()

#############################################################################################


###1. PUNTO DE INICIO ------------------------------------------------------------- #
if not listen and len(target) and port > 0: # mandar del stdin. Ctrol+D para salir
    buffer = sys.stdin.read(); client_sender(buffer) # hace de servidor

if listen: # escucha
    buffer = b""; server_loop()

